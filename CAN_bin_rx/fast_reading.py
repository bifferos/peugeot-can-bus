#!/usr/bin/env python3

"""
    Python receiver for reading the sequences generated by the CAN_bin_tx.ino code, and printing an error
    if something is received out of order.

    It's expected to produce a few errors, but will settle after a couple of seconds.
"""

import serial


reading_frame = []


def is_end_of_frame(port):
    reading_frame.append(port.read()[0])
    if reading_frame[-1] & (1 << 7):
        return True
    return False


def decode_frame():
    """Ignoring the final byte (start of the next frame) extract the data"""
    rx_bytes = [_ for _ in reading_frame]
    reading_frame.clear()

    framing_byte = rx_bytes.pop()
    total_length = framing_byte & 0xf
    id_length = ((framing_byte >> 4) & 0x3) + 2

    if len(rx_bytes) != total_length:
        return 0, []

    id_bytes = rx_bytes[:id_length]

    first = id_bytes.pop(0)
    is_extended = first & (1 << 6)
    id_value = first & 0x3f

    shift = 6
    while id_bytes:
        id_value |= (id_bytes.pop(0) << shift)
        shift += 7

    carry = rx_bytes.pop()
    to_decode = rx_bytes[id_length:]

    decoded = []

    carry |= (framing_byte & (1 << 6)) << 1

    while to_decode:
        decoded.insert(0, to_decode.pop() | (carry & (1 << 7)))
        carry <<= 1

    return id_value, decoded


def get_next_id(previous_id):
    if previous_id < 0x7ff:
        return previous_id + 1
    elif previous_id == 0x7ff:
        return 536870910
    else:
        return 0


def check_expected_sequence(previous_id, current_id):
    expected = get_next_id(previous_id)
    if current_id != expected:
        print(f"ERROR actual id: {current_id}, expected: {expected}")
        return False
    return True


def main():
    previous_id = 0
    port = serial.Serial("/dev/ttyACM0", baudrate=115200)
    print("Connected to serial port")
    while True:
        while not is_end_of_frame(port):
            pass
        id_value, data = decode_frame()
        ok = check_expected_sequence(previous_id, id_value)
        if not ok:
            print("fail data:", data)
        previous_id = id_value


if __name__ == "__main__":
    main()
